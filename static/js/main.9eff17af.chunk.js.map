{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["memo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","gift","setGift","_useState5","_useState6","cake","setCake","processInput","debounce","text","theCake","react_default","a","createElement","src","alt","width","giftBtn","className","onClick","id","type","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNA2EeA,iBAvEH,WAAM,IAAAC,EACUC,mBAAQ,IADlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAGQN,oBAAS,GAHjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGTE,EAHSD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAKQV,oBAAS,GALjBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKTE,EALSD,EAAA,GAKHE,EALGF,EAAA,GAOVG,EAAeC,mBAAS,SAAAC,GAC5B,OAAQA,GACN,IAAK,WACHX,EAAQ,0DACRI,GAAQ,GACRI,GAAQ,GACR,MAEF,IAAK,WACHR,EAAQ,4DACRI,GAAQ,GACRI,GAAQ,GACR,MAEF,IAAK,WACHR,EAAQ,kfAGRI,GAAQ,GACRI,GAAQ,GACR,MAEF,QACER,EAAQ,IACRI,GAAQ,GACRI,GAAQ,KAIX,KAEGI,EAAUL,GACdM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,yEAAyEC,IAAI,OAAOC,MAAM,SACnGL,EAAAC,EAAAC,cAAA,6BAKEI,EAAUhB,GAAQU,EAAAC,EAAAC,cAAA,UAAQK,UAAU,8BAA8BC,QAFvD,kBAAMb,GAAQ,KAEP,QAExB,OACEK,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,oBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,uBACbP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,mBAAmBE,GAAG,gBAAtC,UAEFT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOH,UAAU,eAAeI,SAAU,SAAAC,GAAK,OAAIhB,EAAagB,EAAMC,OAAO3B,WAE3Fc,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBACbP,EAAAC,EAAAC,cAAA,UAAKhB,IAENoB,EACAP,GAEHC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cCzDHO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9eff17af.chunk.js","sourcesContent":["import React, { memo, useState } from 'react';\nimport './App.css';\nimport { debounce } from 'lodash';\n\nconst App = () => {\n  const [value, setValue] = useState(``);\n\n  const [gift, setGift] = useState(false);\n  \n  const [cake, setCake] = useState(false);\n\n  const processInput = debounce(text => {\n    switch (text) {\n      case \"20.07.98\": {\n        setValue(`あなたが生まれた日`);\n        setGift(false);\n        setCake(false);\n        break;\n      }\n      case \"20.07.19\": {\n        setValue(`あなたが21歳になる日`);\n        setGift(false);\n        setCake(false);\n        break;\n      }\n      case \"03.07.19\": {\n        setValue(`今日は君の誕生日ではないが、こんな適切な時もナイン恐れがるから、言いたいことがるんです。\n        “あなたは才能があって、素敵な人だ。僕が信じる”。\n        週末の試験、頑張ろう`);\n        setGift(true);\n        setCake(false);\n        break;\n      }\n      default: {\n        setValue(``);\n        setGift(false);\n        setCake(false);\n        break;\n      }\n    }\n  }, 250);\n\n  const theCake = cake && \n    <div>\n      <img src=\"https://media.static-adayroi.com/sys_master/hcd/hf8/15973474795550.jpg\" alt=\"cake\" width=\"100%\" />\n      <h5>Happy Birthday</h5>\n    </div>\n\n  const showCake = () => setCake(true);\n\n  const giftBtn = gift && <button className=\"btn btn-primary btn-lg mb-3\" onClick={showCake}>Gift</button>\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"col-1\"></div>\n        <div className=\"col-10 text-center\">\n          <div className=\"input-group my-3\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"basic-addon1\">Input</span>\n            </div>\n            <input type=\"text\" className=\"form-control\" onChange={event => processInput(event.target.value)} />\n          </div>\n          <div className=\"text-left mb-3\">\n            <h4>{value}</h4>\n          </div>\n          {giftBtn}\n          {theCake}\n        </div>\n        <div className=\"col-1\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}